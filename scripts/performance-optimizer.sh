#!/bin/bash

# Performance Optimizer for Hyprland Anime Ricing
# ----------------------------------------------
# This script automatically optimizes Hyprland settings based on hardware capabilities
# It can be run at startup or manually to adjust performance settings

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
CONFIG_DIR="$HOME/.config/hypr"
PERF_CONFIG="$CONFIG_DIR/performance.conf"
HYPRLAND_CONF="$CONFIG_DIR/hyprland.conf"
BACKUP_CONF="$CONFIG_DIR/hyprland.conf.bak"

# Function to print colored messages
print_message() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Function to detect system hardware
detect_hardware() {
    print_message "$BLUE" "Detecting system hardware..."
    
    # CPU info
    CPU_MODEL=$(grep "model name" /proc/cpuinfo | head -n 1 | cut -d ':' -f 2 | sed 's/^[ \t]*//')
    CPU_CORES=$(grep -c "processor" /proc/cpuinfo)
    
    # RAM info
    TOTAL_RAM=$(free -m | awk '/^Mem:/ {print $2}')
    
    # GPU info
    if command -v lspci &> /dev/null; then
        GPU_INFO=$(lspci | grep -E 'VGA|3D|Display' | head -n 1 | sed 's/.*: //')
    else
        GPU_INFO="Unknown"
    fi
    
    # Check if running on a laptop
    if [ -d "/sys/class/power_supply" ]; then
        IS_LAPTOP=true
    else
        IS_LAPTOP=false
    fi
    
    print_message "$GREEN" "Hardware detection complete!"
    print_message "$CYAN" "CPU: $CPU_MODEL ($CPU_CORES cores)"
    print_message "$CYAN" "RAM: $TOTAL_RAM MB"
    print_message "$CYAN" "GPU: $GPU_INFO"
    if [ "$IS_LAPTOP" = true ]; then
        print_message "$CYAN" "Device type: Laptop"
    else
        print_message "$CYAN" "Device type: Desktop"
    fi
}

# Function to categorize hardware performance
categorize_performance() {
    print_message "$BLUE" "Categorizing system performance..."
    
    # Default to medium
    PERFORMANCE_CATEGORY="medium"
    
    # Categorize based on RAM
    if [ "$TOTAL_RAM" -lt 4000 ]; then
        PERFORMANCE_CATEGORY="low"
    elif [ "$TOTAL_RAM" -gt 16000 ]; then
        PERFORMANCE_CATEGORY="high"
    fi
    
    # Adjust based on CPU cores
    if [ "$CPU_CORES" -lt 4 ] && [ "$PERFORMANCE_CATEGORY" != "low" ]; then
        PERFORMANCE_CATEGORY="low"
    elif [ "$CPU_CORES" -gt 8 ] && [ "$PERFORMANCE_CATEGORY" = "medium" ]; then
        PERFORMANCE_CATEGORY="high"
    fi
    
    # Adjust based on GPU
    if [[ "$GPU_INFO" == *"Intel"* ]] && [[ "$GPU_INFO" != *"Arc"* ]]; then
        # Intel integrated graphics (not Arc) are typically lower performance
        if [ "$PERFORMANCE_CATEGORY" != "low" ]; then
            PERFORMANCE_CATEGORY="medium"
        fi
    elif [[ "$GPU_INFO" == *"NVIDIA"* ]] || [[ "$GPU_INFO" == *"AMD"* ]] || [[ "$GPU_INFO" == *"Arc"* ]]; then
        # Dedicated GPUs generally perform better
        if [ "$PERFORMANCE_CATEGORY" = "low" ]; then
            PERFORMANCE_CATEGORY="medium"
        fi
    fi
    
    # Adjust for laptops (battery life considerations)
    if [ "$IS_LAPTOP" = true ]; then
        if [ "$PERFORMANCE_CATEGORY" = "high" ]; then
            PERFORMANCE_CATEGORY="medium"
        fi
    fi
    
    print_message "$GREEN" "System categorized as: $PERFORMANCE_CATEGORY performance"
}

# Function to generate performance configuration
generate_performance_config() {
    print_message "$BLUE" "Generating performance configuration..."
    
    # Create backup of current config if it doesn't exist
    if [ ! -f "$BACKUP_CONF" ]; then
        cp "$HYPRLAND_CONF" "$BACKUP_CONF"
        print_message "$YELLOW" "Created backup of hyprland.conf"
    fi
    
    # Create performance configuration
    cat > "$PERF_CONFIG" << EOF
# Performance configuration for Hyprland
# Generated by performance-optimizer.sh
# Performance category: $PERFORMANCE_CATEGORY

# General settings
general {
    # Reduce cursor timeout for better performance
    cursor_inactive_timeout = 5
    # Disable cursor warping for better performance
    no_cursor_warps = true
    # Disable focus follows mouse for better performance
    focus_follows_mouse = false
}

# Decoration settings
decoration {
EOF
    
    # Add decoration settings based on performance category
    if [ "$PERFORMANCE_CATEGORY" = "low" ]; then
        cat >> "$PERF_CONFIG" << EOF
    # Low performance settings
    rounding = 0
    blur {
        enabled = false
    }
    drop_shadow = false
    dim_inactive = false
EOF
    elif [ "$PERFORMANCE_CATEGORY" = "medium" ]; then
        cat >> "$PERF_CONFIG" << EOF
    # Medium performance settings
    rounding = 5
    blur {
        enabled = true
        size = 3
        passes = 1
        new_optimizations = true
        xray = false
    }
    drop_shadow = true
    shadow_range = 5
    shadow_render_power = 2
    dim_inactive = false
EOF
    else
        cat >> "$PERF_CONFIG" << EOF
    # High performance settings
    rounding = 10
    blur {
        enabled = true
        size = 8
        passes = 2
        new_optimizations = true
        xray = true
    }
    drop_shadow = true
    shadow_range = 15
    shadow_render_power = 3
    dim_inactive = true
    dim_strength = 0.1
EOF
    fi
    
    # Continue with animation settings
    cat >> "$PERF_CONFIG" << EOF
}

# Animation settings
animations {
    enabled = true
EOF
    
    # Add animation settings based on performance category
    if [ "$PERFORMANCE_CATEGORY" = "low" ]; then
        cat >> "$PERF_CONFIG" << EOF
    # Low performance animations
    bezier = myBezier, 0.05, 0.9, 0.1, 1.0
    animation = windows, 1, 5, myBezier
    animation = windowsOut, 1, 5, default
    animation = border, 1, 5, default
    animation = fade, 1, 5, default
    animation = workspaces, 1, 5, default
EOF
    elif [ "$PERFORMANCE_CATEGORY" = "medium" ]; then
        cat >> "$PERF_CONFIG" << EOF
    # Medium performance animations
    bezier = myBezier, 0.1, 0.9, 0.1, 1.0
    animation = windows, 1, 7, myBezier
    animation = windowsOut, 1, 7, default
    animation = border, 1, 7, default
    animation = fade, 1, 7, default
    animation = workspaces, 1, 7, default
EOF
    else
        cat >> "$PERF_CONFIG" << EOF
    # High performance animations
    bezier = myBezier, 0.05, 0.9, 0.1, 1.05
    bezier = myBezier2, 0.1, 1.0, 0.1, 1.0
    animation = windows, 1, 10, myBezier
    animation = windowsOut, 1, 10, myBezier2
    animation = border, 1, 10, default
    animation = fade, 1, 10, default
    animation = workspaces, 1, 10, myBezier2
EOF
    fi
    
    # Close animations section
    cat >> "$PERF_CONFIG" << EOF
}

# Misc settings
misc {
    disable_hyprland_logo = true
    disable_splash_rendering = true
    mouse_move_enables_dpms = true
    key_press_enables_dpms = true
    animate_manual_resizes = false
    animate_mouse_windowdragging = false
    enable_swallow = false
    focus_on_activate = true
}
EOF
    
    print_message "$GREEN" "Performance configuration generated!"
}

# Function to apply performance configuration
apply_performance_config() {
    print_message "$BLUE" "Applying performance configuration..."
    
    # Check if hyprctl is available
    if ! command -v hyprctl &> /dev/null; then
        print_message "$RED" "hyprctl not found. Cannot apply configuration dynamically."
        print_message "$YELLOW" "Please restart Hyprland to apply changes."
        return
    fi
    
    # Apply configuration using hyprctl
    hyprctl reload
    
    print_message "$GREEN" "Performance configuration applied!"
    print_message "$YELLOW" "Note: Some settings may require a restart of Hyprland to take full effect."
}

# Function to create a startup entry
create_startup_entry() {
    print_message "$BLUE" "Creating startup entry..."
    
    # Add to hyprland.conf if not already present
    if ! grep -q "exec-once = $CONFIG_DIR/scripts/performance-optimizer.sh" "$HYPRLAND_CONF"; then
        # Add after other exec-once entries
        sed -i '/^exec-once/a exec-once = '"$CONFIG_DIR"'/scripts/performance-optimizer.sh' "$HYPRLAND_CONF"
        print_message "$GREEN" "Added startup entry to hyprland.conf"
    else
        print_message "$YELLOW" "Startup entry already exists in hyprland.conf"
    fi
}

# Function to show help
show_help() {
    echo "Performance Optimizer for Hyprland Anime Ricing"
    echo "Usage: $0 [OPTION]"
    echo ""
    echo "Options:"
    echo "  --apply      Detect hardware and apply optimized settings"
    echo "  --restore    Restore original configuration"
    echo "  --auto       Add to startup and apply (default)"
    echo "  --help       Show this help message"
    echo ""
}

# Main function
main() {
    # Parse command-line arguments
    case "$1" in
        --apply)
            detect_hardware
            categorize_performance
            generate_performance_config
            apply_performance_config
            ;;
        --restore)
            if [ -f "$BACKUP_CONF" ]; then
                cp "$BACKUP_CONF" "$HYPRLAND_CONF"
                print_message "$GREEN" "Restored original configuration"
                apply_performance_config
            else
                print_message "$RED" "No backup configuration found"
            fi
            ;;
        --auto)
            detect_hardware
            categorize_performance
            generate_performance_config
            apply_performance_config
            create_startup_entry
            ;;
        --help)
            show_help
            ;;
        *)
            detect_hardware
            categorize_performance
            generate_performance_config
            apply_performance_config
            ;;
    esac
}

# Run the main function
main "$@" 